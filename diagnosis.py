# -*- coding: utf-8 -*-
"""diagnosis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CA8l3DobIoTXGR8V4POAqjW9v2O42Qmv

importing dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""data collection and processing"""

#load csv data to pandas
heart_data = pd.read_csv('/content/data.csv')

#print 5 rows of dataset
heart_data.head()

#print 5 last rows of dataset
heart_data.tail()

#numbers of rows and columns in the dataset
heart_data.shape

#getting info about data
heart_data.info()

#checking for missing values
heart_data.isnull().sum()

#statistical measures about data
heart_data.describe()

#checking distribution of target variable
heart_data['target'].value_counts()

"""1-->defective heart
0-->healthy heart

splitting features and target
"""

x = heart_data.drop(columns='target', axis=1)
y = heart_data['target']

print(x)

print(y)

"""splitting data into training data and test data"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=2)

print(x.shape, x_train.shape, x_test.shape)

"""model training

logistic regression
"""

model = LogisticRegression()

#training logistic regression model with training data
model.fit(x_train, y_train)

"""model evaluation

accuracy score
"""

#accuracy on training data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print('Accuracy on training data: ', training_data_accuracy)

#accuracy score on test data
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print('Accuracy on test data: ', test_data_accuracy)

"""predictive system"""

input_data = (50,1,0,150,243,0,0,128,0,2.6,1,0,3)
#change input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)
#reshape numpy array predicting for 1 instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0):
  print('person dont have heart disease')
else:
  print('person has heart disease')

